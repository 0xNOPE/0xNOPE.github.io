<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0xNOPE</title>
  
  
  <link href="http://0xnope.top/atom.xml" rel="self"/>
  
  <link href="http://0xnope.top/"/>
  <updated>2021-01-03T07:04:17.361Z</updated>
  <id>http://0xnope.top/</id>
  
  <author>
    <name>0xNOPE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://0xnope.top/2021/03/02/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://0xnope.top/2021/03/02/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-03-02T12:28:33.587Z</published>
    <updated>2021-01-03T07:04:17.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a><strong>重写和重载</strong></h1><h3 id="重写："><a href="#重写：" class="headerlink" title="重写："></a>重写：</h3><p>(外壳不变、final、static、权限、继承)</p><p>1、返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong></p><p>2、声明为 <strong>final</strong> 的方法不能被重写。</p><p>3、声明为 <strong>static</strong> 的方法不能被重写，但是能够被再次声明。</p><p>4、<strong>构造方法</strong>不能被重写。</p><p>5、<strong>访问权限</strong>不能比父类中被重写的方法的访问权限更低。</p><p>6、如果不能<strong>继承</strong>一个类，则不能重写该类的方法。</p><h3 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h3><p>1、方法名字相同，<strong>参数</strong>一定不同。返回类型<strong>可以相同也可以不同</strong>。</p><p>2、被重载的方法可以改变访问<strong>修饰符</strong>。</p><p>3、<strong>返回值</strong>不能作为重载函数的区分标准！！！</p><p>4、<strong>构造方法</strong>可以被重载！！！</p><p>简言之，<strong>重写外壳不变，重载参数必变。</strong></p><blockquote><p>例题：</p><p>下面哪个函数是public void  aMethod(){…}的重载函数？（ D ） </p><p>A、void  aMethod( ){…} </p><p>B、public int  aMethod(){…} </p><p>C、public void  aMethod ( ){…} </p><p>D、public int  aMethod ( int m){…} </p></blockquote><h1 id="Java数组初始化默认值："><a href="#Java数组初始化默认值：" class="headerlink" title="Java数组初始化默认值："></a>Java数组初始化默认值：</h1><table><thead><tr><th>类型</th><th>默认初始化</th></tr></thead><tbody><tr><td>boolean</td><td>false</td></tr><tr><td>int</td><td>0</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0.0d</td></tr><tr><td>String</td><td>null</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>char</td><td>‘/uoooo’(null)</td></tr><tr><td>byte</td><td>(byte)0</td></tr><tr><td>short</td><td>(short)0</td></tr></tbody></table><p>​     </p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h3 id="接口与类相似点："><a href="#接口与类相似点：" class="headerlink" title="接口与类相似点："></a>接口与类相似点：</h3><ul><li>接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><h3 id="接口和类的区别："><a href="#接口和类的区别：" class="headerlink" title="接口和类的区别："></a>接口和类的区别：</h3><ul><li>没有构造方法。</li><li>所有的方法必须是抽象方法。</li><li>不是被类继承了，而是要被类实现。</li><li>支持多继承。</li><li>不能用于实例化。</li></ul><h3 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h3><ul><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（并且只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li>抽象类中的方法可以有方法体，但接口不行。</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><blockquote><p>注：JDK 1.8 以后，接口里可以有静态方法和方法体了。</p></blockquote><h3 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他："><a href="#其他：" class="headerlink" title="其他："></a><strong>其他</strong>：</h1><p>1、数组没有**length()**这个方法，string有length()这个方法。</p><p>2、<strong>abstract</strong>不能与<strong>final</strong>并列修饰同一个类（因为一个必须要继承，一个又是最终类不能继承）。</p><p>3、<strong>System</strong>在<strong>java.lang</strong>包当中，注意不是在java.util当中，System是个特殊类，不能被实例化，不用导入就可以用。</p><p>4、<strong>监听事件</strong>和<strong>处理事件</strong>分别由<strong>Listener</strong>和<strong>构件</strong>完成。</p><p>5、<strong>构造方法</strong>可以被重载！！！</p><p>6、编译java程序时出现error: <strong>cannot read</strong>: aaa.java，原因是：java源文件名后缀一定是以 .txt 结尾。</p><p>7、java源文件 aaa.java，编辑保存后<strong>未编译</strong>，在其所在目录下执行 java aaa结果为：Exception in thread “main” java.lang.NoClassDefFoundError: aaa。</p><p>8、Java的标识符：不能以数字开头如：<strong>3com</strong>、*<strong>point</strong>也是错误写法。</p><p>9、NULL、 unsigned、 string、 Float不是Java关键字。</p><p>10、/*…*/    注释方法能够支持javadoc命令。</p><p>11、<strong>throw</strong>关键字抛出异常。</p><p>12、<strong>FlowLayout</strong>布局管理器使用的是组件的最佳尺寸。</p><p>13、Frame的默认的布局管理器是<strong>BorderLayout</strong>。</p><p>14、容器被重置大小后，<strong>FlowLayout</strong>布局管理器的容器中的组件大小不随容器大小的变化而改变。</p><p>15、下面哪个语句（<strong>初始化数组</strong>）是不正确的：（ B ）。</p><p>​            A: int x[] = {1,2,3}; </p><p>​            B: int x[3] = {1,2,3}; </p><p>​            C: int[] x = {1,2,3}; </p><p>​            D: int x[] = new int[]{1,2,3}; </p><p>16、子类无条件地继承父类不含参数的构造函数。</p><p>17、、下面哪个表达式正确?（ D ）。<br>  A．<strong>float   f=1.3</strong>;     B．char    c=”a”   C.    byte   b=257;     D．int i=10</p><p>18、以下代码段执行后的输出结果为（ C ）。 </p><p>​            int x=-3; float y=10.0f;  </p><p>​            System.out.println(y%x); </p><p>​            A、不能成功编译   B、-1.0        C、1.0     D、-1 </p><p>19、<strong>static</strong>修饰符是所有同一个类生成的对象共享的。</p><p>20、<strong>synchronized</strong>关键字可以对对象加互斥锁。</p><p>21、内存回收程序可以在指定的时间释放内存对象。</p><p>22、如果类中的成员变量可以被同一包访问，使用<strong>no modifier</strong>约束符。</p><p>23、<strong>Applet</strong>程序中可以不定义init()方法。</p><p>24、Applet程序编译生成字节码文件,然后将该字节码文件嵌入到一个HTML文件中, 由<strong>浏览器</strong>解释执行。</p><p>25、Applet 是一种特殊的  Panel，它是  Java Applet 程序的最外层容器。</p><p>26、要编译一个文件名为Test的Java源程序,在命令控制台窗口输入编译命令javac Test.java。</p><p>27、要在类声明中实现接口,需使用关键字<strong>implements</strong>。</p><p>28、如果局部变量名与成员变量名相同,则<strong>成员变量</strong>被屏蔽。</p><p>29、一个对象的生命周期包括3个阶段：创建、使用和释放。</p><p>30、在 Java 的方法中定义一个<strong>常量</strong>要用const  关键字 （错，要用static final）</p><p>31、<strong>run</strong>方法用于定义线程的执行体</p><p>32、在使用<strong>interface</strong>声明一个接口时，只能使用<strong>public</strong>修饰符<strong>修饰接口</strong></p><p>33、Java的字符类型采用的是Unicode编码，每个Unicode码占用2个byte（16个bit）。</p><p>34、java所有类的父类是（ d ）。</p><p>​        A Father </p><p>​        B Lang </p><p>​        C Exception </p><p>​        D Object</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重写和重载&quot;&gt;&lt;a href=&quot;#重写和重载&quot; class=&quot;headerlink&quot; title=&quot;重写和重载&quot;&gt;&lt;/a&gt;&lt;strong&gt;重写和重载&lt;/strong&gt;&lt;/h1&gt;&lt;h3 id=&quot;重写：&quot;&gt;&lt;a href=&quot;#重写：&quot; class=&quot;headerlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://0xnope.top/2021/03/02/hello-world/"/>
    <id>http://0xnope.top/2021/03/02/hello-world/</id>
    <published>2021-03-02T12:12:34.218Z</published>
    <updated>2021-03-02T12:12:34.218Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
